# GENERATED BY CHATGPT

import os
import matplotlib.pyplot as plt
from collections import defaultdict
import math
from PIL import Image

coinsCount = 3

def parse_file(filename):
    data = defaultdict(lambda: defaultdict(list))
    
    with open(filename, 'r') as file:
        lines = [line.strip() for line in file.readlines()]
    
    strategy, day = None, None
    
    for line in lines:
        if line.startswith("STRATEGY"):
            strategy = int(line.split()[1])
        elif line.startswith("DAY"):
            day = int(line.split()[1])
        elif strategy is not None and day is not None and line:
            try:
                apr, percent = map(float, line.split(" "))
                data[strategy][day].append((apr, percent))
            except ValueError:
                pass
    
    return data

def plot_individual_graphs(data):
    strategy_images = defaultdict(list)
    temp_dir = "temp_images"
    os.makedirs(temp_dir, exist_ok=True)
    
    for strategy, days in data.items():
        for day, values in sorted(days.items()):
            if values:
                aprs, percents = zip(*values)
                fig, ax = plt.subplots(figsize=(6, 4), dpi=300)
                ax.plot(aprs, percents, marker='o', linestyle='-', linewidth=2, markersize=6)
                ax.set_xlabel("APR", fontsize=12, labelpad=12)
                ax.set_ylabel("% сверхприбыли", fontsize=12, labelpad=12)
                ax.set_title(f"Стратегия #{strategy}, холд {day}d", fontsize=14, pad=20)
                ax.grid(True, linestyle='--', linewidth=0.5)
                
                output_path = os.path.join(temp_dir, f"strategy_{strategy}_day_{day}.png")
                fig.savefig(output_path, bbox_inches='tight', pad_inches=0.2, transparent=False)
                plt.close(fig)
                
                strategy_images[strategy].append(output_path)
    
    return strategy_images

def create_strategy_collage(strategy_images, output_dir=f"images/{coinsCount}coins"):
    os.makedirs(output_dir, exist_ok=True)
    
    for strategy, images in strategy_images.items():
        if len(images) != 4:
            continue  # Пропускаем стратегии, у которых нет 4 графиков
        
        img_list = [Image.open(img).convert("RGB") for img in sorted(images)]
        widths, heights = zip(*(img.size for img in img_list))
        max_width, max_height = max(widths), max(heights)
        
        cols, rows = 2, 2  # Фиксированный коллаж 2x2
        collage = Image.new("RGB", (max_width * cols, max_height * rows), "white")
        
        for idx, img in enumerate(img_list):
            img_resized = img.resize((max_width, max_height), Image.LANCZOS)
            x_offset = (idx % cols) * max_width
            y_offset = (idx // cols) * max_height
            collage.paste(img_resized, (x_offset, y_offset))
        
        collage_output_path = os.path.join(output_dir, f"strategy_{strategy}_collage.png")
        collage.save(collage_output_path, quality=100)
    
    # Удаляем временные файлы
    for img in os.listdir("temp_images"):
        os.remove(os.path.join("temp_images", img))
    os.rmdir("temp_images")

def main():
    filename = f"results/{coinsCount}coins.txt"
    data = parse_file(filename)
    strategy_images = plot_individual_graphs(data)
    create_strategy_collage(strategy_images)

if __name__ == "__main__":
    main()
